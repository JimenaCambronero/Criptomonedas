{"ast":null,"code":"var _jsxFileName = \"/Users/jimenacambronero/Desktop/Curso Practico React/criptomonedas/src/components/Formulario.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport useMoneda from '../hooks/useMoneda';\nimport useCritomonedas from './useCritomonedas';\nimport Error from './Error';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Boton = styled.input`\n  margin-top: 20px;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border:none;\n  width:100%;\n  border-radius: 10px;\n  color: #fff;\n  transition: background-color .3s ease;\n    &:hover{\n      background-color: #326ac0;\n      cursor.pointer;\n    }`;\n_c = Boton;\n\nconst Formulario = _ref => {\n  _s();\n\n  let {\n    setMoneda,\n    setCriptomoneda\n  } = _ref;\n  // state del listado de criptomonedas\n  const [listaCripto, setListaCripto] = useState([]);\n  const [error, setError] = useState(false);\n  const monedas = [{\n    codigo: 'USD',\n    nombre: 'Dolar Estadounidense'\n  }, {\n    codigo: 'MXN',\n    nombre: 'Peso Mexicxano'\n  }, {\n    codigo: 'EUR',\n    nombre: 'Euro'\n  }, {\n    codigo: 'ARG',\n    nombre: 'Peso Argentino'\n  }]; // usamos el hook useMoneda, podemos llamarlo con otros nombres, lo q importa es el orden\n\n  const [moneda, Seleccionar] = useMoneda('Elige la Moneda', '', monedas); //  utilizamos el hook useCripto\n\n  const [criptomoneda, SeleccionarCripto] = useCritomonedas('Elige tu criptomoneda', '', listaCripto); // llamado a la API\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n      const resultado = await axios.get(url);\n      setListaCripto = resultado.data.Data;\n    };\n\n    consultarAPI();\n  }, []); // cuando el usuario hace submit\n\n  const cotizarMoneda = e => {\n    e.preventDefault(); // validamos si ambos campos estas llenos\n\n    if (moneda === '' || criptomoneda === '') {\n      setError(true);\n      return;\n    } // pasar los datos al componente principal\n\n\n    setError(false);\n    setMoneda(moneda);\n    setCriptomoneda(criptomoneda);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: cotizarMoneda,\n    children: [error ? /*#__PURE__*/_jsxDEV(Error, {\n      mensaje: \"Todos los campos son obligatorios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this) : null, /*#__PURE__*/_jsxDEV(Seleccionar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SeleccionarCripto, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Boton, {\n      type: \"submit\",\n      value: \"calcular\",\n      children: \"COTIZA AHORA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Formulario, \"XExTlM3hIRVSIedBCv9ae7GMSic=\", false, function () {\n  return [useMoneda, useCritomonedas];\n});\n\n_c2 = Formulario;\nexport default Formulario;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Boton\");\n$RefreshReg$(_c2, \"Formulario\");","map":{"version":3,"names":["React","useEffect","useState","axios","styled","useMoneda","useCritomonedas","Error","Boton","input","Formulario","setMoneda","setCriptomoneda","listaCripto","setListaCripto","error","setError","monedas","codigo","nombre","moneda","Seleccionar","criptomoneda","SeleccionarCripto","consultarAPI","url","resultado","get","data","Data","cotizarMoneda","e","preventDefault"],"sources":["/Users/jimenacambronero/Desktop/Curso Practico React/criptomonedas/src/components/Formulario.jsx"],"sourcesContent":["import React from 'react';\nimport { useEffect,useState } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport useMoneda from '../hooks/useMoneda';\nimport useCritomonedas from './useCritomonedas';\nimport Error from './Error';\n\nconst Boton = styled.input`\n  margin-top: 20px;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border:none;\n  width:100%;\n  border-radius: 10px;\n  color: #fff;\n  transition: background-color .3s ease;\n    &:hover{\n      background-color: #326ac0;\n      cursor.pointer;\n    }`\n;\n\nconst Formulario = ({setMoneda, setCriptomoneda}) => {\n\n// state del listado de criptomonedas\n  const [listaCripto, setListaCripto] = useState ([]);\n  const [error, setError] = useState (false);\n\n\n\n  const monedas = [\n    {codigo: 'USD', nombre: 'Dolar Estadounidense'},\n    {codigo: 'MXN', nombre: 'Peso Mexicxano'},\n    {codigo: 'EUR', nombre: 'Euro'},\n    {codigo: 'ARG', nombre: 'Peso Argentino'}\n ]\n\n// usamos el hook useMoneda, podemos llamarlo con otros nombres, lo q importa es el orden\n const [moneda, Seleccionar] = useMoneda('Elige la Moneda','', monedas);\n\n//  utilizamos el hook useCripto\n\nconst [criptomoneda, SeleccionarCripto ] = useCritomonedas('Elige tu criptomoneda', '', listaCripto);\n\n// llamado a la API\n\nuseEffect (()=> {\n  const consultarAPI =  async ()=>{\n    const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n    const resultado = await axios.get (url);\n    setListaCripto = (resultado.data.Data);\n  }\n  consultarAPI()\n},[])\n\n// cuando el usuario hace submit\n  const cotizarMoneda = e =>{\n    e.preventDefault()\n    // validamos si ambos campos estas llenos\n    if(moneda ===''|| criptomoneda === ''){\n      setError(true);\n      return;\n    }\n    // pasar los datos al componente principal\n    setError(false);\n    setMoneda(moneda);\n    setCriptomoneda(criptomoneda);\n  }\n\n\n  return (\n    <form \n      onSubmit={cotizarMoneda}>  \n      {error ? <Error mensaje = 'Todos los campos son obligatorios'/>: null}\n        <Seleccionar/>\n        <SeleccionarCripto/>\n        <Boton\n          type='submit'\n          value='calcular'>\n            COTIZA AHORA\n        </Boton>\n    </form>\n  );\n}\n\nexport default Formulario;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAdA;KAAMD,K;;AAiBN,MAAME,UAAU,GAAG,QAAkC;EAAA;;EAAA,IAAjC;IAACC,SAAD;IAAYC;EAAZ,CAAiC;EAErD;EACE,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAE,EAAF,CAA9C;EACA,MAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAE,KAAF,CAAlC;EAIA,MAAMe,OAAO,GAAG,CACd;IAACC,MAAM,EAAE,KAAT;IAAgBC,MAAM,EAAE;EAAxB,CADc,EAEd;IAACD,MAAM,EAAE,KAAT;IAAgBC,MAAM,EAAE;EAAxB,CAFc,EAGd;IAACD,MAAM,EAAE,KAAT;IAAgBC,MAAM,EAAE;EAAxB,CAHc,EAId;IAACD,MAAM,EAAE,KAAT;IAAgBC,MAAM,EAAE;EAAxB,CAJc,CAAhB,CARmD,CAerD;;EACC,MAAM,CAACC,MAAD,EAASC,WAAT,IAAwBhB,SAAS,CAAC,iBAAD,EAAmB,EAAnB,EAAuBY,OAAvB,CAAvC,CAhBoD,CAkBrD;;EAEA,MAAM,CAACK,YAAD,EAAeC,iBAAf,IAAqCjB,eAAe,CAAC,uBAAD,EAA0B,EAA1B,EAA8BO,WAA9B,CAA1D,CApBqD,CAsBrD;;EAEAZ,SAAS,CAAE,MAAK;IACd,MAAMuB,YAAY,GAAI,YAAU;MAC9B,MAAMC,GAAG,GAAG,yEAAZ;MACA,MAAMC,SAAS,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAWF,GAAX,CAAxB;MACAX,cAAc,GAAIY,SAAS,CAACE,IAAV,CAAeC,IAAjC;IACD,CAJD;;IAKAL,YAAY;EACb,CAPQ,EAOP,EAPO,CAAT,CAxBqD,CAiCrD;;EACE,MAAMM,aAAa,GAAGC,CAAC,IAAG;IACxBA,CAAC,CAACC,cAAF,GADwB,CAExB;;IACA,IAAGZ,MAAM,KAAI,EAAV,IAAeE,YAAY,KAAK,EAAnC,EAAsC;MACpCN,QAAQ,CAAC,IAAD,CAAR;MACA;IACD,CANuB,CAOxB;;;IACAA,QAAQ,CAAC,KAAD,CAAR;IACAL,SAAS,CAACS,MAAD,CAAT;IACAR,eAAe,CAACU,YAAD,CAAf;EACD,CAXD;;EAcA,oBACE;IACE,QAAQ,EAAEQ,aADZ;IAAA,WAEGf,KAAK,gBAAG,QAAC,KAAD;MAAO,OAAO,EAAG;IAAjB;MAAA;MAAA;MAAA;IAAA,QAAH,GAA2D,IAFnE,eAGI,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII,QAAC,iBAAD;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKI,QAAC,KAAD;MACE,IAAI,EAAC,QADP;MAEE,KAAK,EAAC,UAFR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CA7DD;;GAAML,U;UAgByBL,S,EAIYC,e;;;MApBrCI,U;AA+DN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}